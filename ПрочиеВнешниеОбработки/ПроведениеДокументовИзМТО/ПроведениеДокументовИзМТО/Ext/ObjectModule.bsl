
Функция СведенияОВнешнейОбработке() Экспорт 
	
	ИмяОтчета = ЭтотОбъект.Метаданные().Имя; 
	Синоним = ЭтотОбъект.Метаданные().Синоним; 
	Синоним = ?(ЗначениеЗаполнено(Синоним),Синоним, ИмяОтчета); 
	РегистрационныеДанные = Новый Структура();
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Наименование", Синоним);
	РегистрационныеДанные.Вставить("Версия", "1.0");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Информация", "Обработка "+Синоним)	;
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд, Синоним, "1" , "ОткрытиеФормы", Истина, );
	РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ОткрытиеФормы", ПоказыватьОповещение = Ложь, Модификатор)
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры


Процедура ДлительнаяОперации(СтруктураПараметров, АдресРезультата) Экспорт
	
	НачПериода = СтруктураПараметров.НачПериода;
	КонПериода = СтруктураПараметров.КонПериода;
	Организация = СтруктураПараметров.Организация;
	ТипыДокументов = СтруктураПараметров.ТипыДокументов;
	Настройки = СтруктураПараметров.Настройки;
	
	Логин = Строка(
	ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.игсНастройкиМеханизмов"),
	"Логин"));
	
	Пароль = Строка(
	ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("РегистрСведений.игсНастройкиМеханизмов"),
	"Пароль")); 
	
	ПутьКСервису =  ПланыВидовХарактеристик.игсНастройкиМеханизмов.ПутьКWebСервисуERP;
	ВебСервис = игсНастройкиМеханизмовВызовСервера.ПолучитьЗначениеНастройки(ПутьКСервису, Организация);
	
	Определения		= Новый WSОпределения(ВебСервис, Логин, Пароль); 
	Прокси 			= Новый WSПрокси(Определения, "http://127.0.0.1", "igsERP", "igsERPSoap", , 10); 
	Прокси.Пользователь = Логин;
	Прокси.Пароль 	= Пароль;
	
	
	Запрос = Новый Запрос;
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|    %ТипДокумента%.Ссылка
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|    Документ.%ТипДокумента% КАК %ТипДокумента%
	|ГДЕ
	|    (%ТипДокумента%.Номер ПОДОБНО ""%НЭЕР%"" ИЛИ %ТипДокумента%.Номер ПОДОБНО ""%ИГЕР%"" ИЛИ %ТипДокумента%.Номер ПОДОБНО ""%ИТЕР%"")
	|    И (%ТипДокумента%.Дата МЕЖДУ &НачПериода И &КонПериода) И %ТипДокумента%.Организация = &Организация";
	
	ТекстОбъединение = "|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Для Каждого ТипДок Из ТипыДокументов Цикл
		
		РазделительОбъединить = ?(Запрос.Текст = "", "", ТекстОбъединение);
		Текст = СтрЗаменить(ШаблонТекстаЗапроса, "%ТипДокумента%", ТипДок);
		Запрос.Текст = Запрос.Текст + РазделительОбъединить + Текст;
		
	КонецЦикла; 
	
	
	Запрос.Текст = Запрос.Текст +
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ.Ссылка.Дата";
	
	Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать(); 
	УстановитьПривилегированныйРежим(Ложь);
	
	ВсегоДокументов = ВыборкаДетальныеЗаписи.Количество();
	СчетчикДокументов = 1;
	
	МассивВозврат = Новый Массив;			
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекущийПроцентВыполнения = Окр(100*СчетчикДокументов/ВсегоДокументов, 0);
		СчетчикДокументов = СчетчикДокументов + 1;
		ДокументПроведен	= Прокси.DocumentStatus(Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()));
		Если ДокументПроведен <> ВыборкаДетальныеЗаписи.Ссылка.Проведен Тогда	
			Если ДокументПроведен Тогда			
				Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();				
				Попытка
					Об.Записать(РежимЗаписиДокумента.Проведение);					
				Исключение
					ДлительныеОперации.СообщитьПрогресс(ТекущийПроцентВыполнения, "НЕ УДАЛОСЬ ПРОВЕСТИ " + ВыборкаДетальныеЗаписи.Ссылка);
					ПоместитьВоВременноеХранилище(МассивВозврат, АдресРезультата);
					ОбщегоНазначения.СообщитьПользователю("НЕ УДАЛОСЬ ПРОВЕСТИ " + ВыборкаДетальныеЗаписи.Ссылка);
					Если Настройки.НеОстанавливаться = ЛОЖЬ Тогда
						Возврат;
					КонецЕсли; 					
				КонецПопытки;
				ДлительныеОперации.СообщитьПрогресс(ТекущийПроцентВыполнения, "Проведен: " + ВыборкаДетальныеЗаписи.Ссылка);
				ПоместитьВоВременноеХранилище(МассивВозврат, АдресРезультата);
				ОбщегоНазначения.СообщитьПользователю("Проведен: " + ВыборкаДетальныеЗаписи.Ссылка);
			Иначе
				Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();				
				Попытка					
					Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);					
				Исключение				
					ДлительныеОперации.СообщитьПрогресс(ТекущийПроцентВыполнения, "НЕ УДАЛОСЬ ОТМЕНИТЬ ПРОВЕВЕДЕНИЕ " + ВыборкаДетальныеЗаписи.Ссылка);
					ПоместитьВоВременноеХранилище(МассивВозврат, АдресРезультата);
					ОбщегоНазначения.СообщитьПользователю("НЕ УДАЛОСЬ ОТМЕНИТЬ ПРОВЕВЕДЕНИЕ " + ВыборкаДетальныеЗаписи.Ссылка);
					Если Настройки.НеОстанавливаться = ЛОЖЬ Тогда
						Возврат;
					КонецЕсли; 					
				КонецПопытки;
				ДлительныеОперации.СообщитьПрогресс(ТекущийПроцентВыполнения, "ОТМЕНА ПРОВЕДЕНИЯ " + ВыборкаДетальныеЗаписи.Ссылка);
				ПоместитьВоВременноеХранилище(МассивВозврат, АдресРезультата);
				ОбщегоНазначения.СообщитьПользователю("ОТМЕНА ПРОВЕДЕНИЯ " + ВыборкаДетальныеЗаписи.Ссылка);				
			КонецЕсли; 			
		ИначеЕсли ДокументПроведен = Истина И Настройки.ВыполнитьОбщееПерепроведение Тогда			
			Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();			
			Попытка				
				Об.Записать(РежимЗаписиДокумента.Проведение);				
			Исключение
				ДлительныеОперации.СообщитьПрогресс(ТекущийПроцентВыполнения, "НЕ УДАЛОСЬ ПРОВЕСТИ " + ВыборкаДетальныеЗаписи.Ссылка);
				ПоместитьВоВременноеХранилище(МассивВозврат, АдресРезультата);
				ОбщегоНазначения.СообщитьПользователю("НЕ УДАЛОСЬ ПРОВЕСТИ " + ВыборкаДетальныеЗаписи.Ссылка);
				Если Настройки.НеОстанавливаться = ЛОЖЬ Тогда
					Возврат;
				КонецЕсли; 				
			КонецПопытки;				
		КонецЕсли;
		
		Если СчетчикДокументов/100 - Окр(СчетчикДокументов/100, 0) = 0 Тогда
			МассивВозврат.Добавить(СчетчикДокументов);
		КонецЕсли;
		
		ДлительныеОперации.СообщитьПрогресс(ТекущийПроцентВыполнения, СтрШаблон("Документов проведено: %2/%3
		|Выполняется проведение %1", ВыборкаДетальныеЗаписи.Ссылка, СчетчикДокументов, ВсегоДокументов));	
	КонецЦикла;
	ПоместитьВоВременноеХранилище(МассивВозврат, АдресРезультата);
	
	
КонецПроцедуры
