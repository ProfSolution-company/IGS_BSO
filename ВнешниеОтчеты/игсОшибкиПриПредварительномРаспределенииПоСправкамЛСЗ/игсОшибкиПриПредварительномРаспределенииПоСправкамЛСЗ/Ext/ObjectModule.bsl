#Область ОбработчикСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Поиск Индексов параметров 
	ДатаИндекс = ПолучитьИндексПараметра(КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, "Дата");
	ОрганизацияИндекс = ПолучитьИндексПараметра(КомпоновщикНастроек.ПользовательскиеНастройки.Элементы, "Организация");
	
	Если ДатаИндекс = -1 ИЛИ ОрганизацияИндекс = -1 Тогда
		Возврат;	
	КонецЕсли;
	
	// Чтение параметров пользователя
	Дата = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[ДатаИндекс].Значение.Дата;
	Организация = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[ОрганизацияИндекс].Значение;
	
	// Получение таблицы будущих проводок за указанный период
	ТаблицаПроводок = игсРаспределениеПоПроизводственнойПрограмме.ПолучитьТаблицу(Дата, Организация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗатратыКРаспрОстатки.Организация КАК Организация,
			|	ЗатратыКРаспрОстатки.СчетЗатрат КАК СчетЗатрат,
			|	ЗатратыКРаспрОстатки.СчетЗатратНУ КАК СчетЗатратНУ,
			|	ЗатратыКРаспрОстатки.СтатьяЗатрат КАК СтатьяЗатрат,
			|	ЗатратыКРаспрОстатки.ПрочийДоходРасход КАК ПрочийДоходРасход,
			|	ЗатратыКРаспрОстатки.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|	ЗатратыКРаспрОстатки.Бурение КАК Бурение,
			|	ЗатратыКРаспрОстатки.ОбъектРаспределения КАК ОбъектРаспределения,
			|	ЗатратыКРаспрОстатки.СправкаРаспределения КАК СправкаРаспределения,
			|	ЗатратыКРаспрОстатки.Позиция КАК Позиция,
			|	ЗатратыКРаспрОстатки.ДатаНачалаДляОС КАК ДатаНачалаДляОС,
			|	ЗатратыКРаспрОстатки.ДатаОкончанияДляОС КАК ДатаОкончанияДляОС,
			|	ЗатратыКРаспрОстатки.ОсновноеСредство КАК ОсновноеСредство,
			|	ЗатратыКРаспрОстатки.ВосстановительныеРаботы КАК ВосстановительныеРаботы,
			|	ЗатратыКРаспрОстатки.СуммаОстаток КАК СуммаОстаток,
			|	ЗатратыКРаспрОстатки.СуммаНУОстаток КАК СуммаНУОстаток,
			|	ЗатратыКРаспрОстатки.СуммаВРОстаток КАК СуммаВРОстаток,
			|	ЗатратыКРаспрОстатки.СуммаПРОстаток КАК СуммаПРОстаток,
			|	ИСТИНА КАК ВходитВРаспределение
			|ИЗ
			|	РегистрНакопления.игсЗатратыКРаспределениюПоПроизводственнойПрограмме.Остатки(&КонецПериода, Организация = &Организация) КАК ЗатратыКРаспрОстатки";
	
	Запрос.УстановитьПараметр("КонецПериода", Дата + 1);
	Запрос.УстановитьПараметр("Организация", Организация);
			
	ЗатратыКРаспределениюОстатки = Запрос.Выполнить().Выгрузить();	
	
	// Нераспределенные затраты
	Для Каждого КРаспределению Из ЗатратыКРаспределениюОстатки Цикл
		// Затраты, которые будут распределены
		Для Каждого Проводка Из ТаблицаПроводок Цикл
			
			Если КРаспределению.ОбъектРаспределения = Проводка.ОбъектРаспределения И
				КРаспределению.СправкаРаспределения = Проводка.СправкаРаспределения И
				КРаспределению.ДатаНачалаДляОС = Проводка.ДатаНачалаДляОС И
				КРаспределению.ДатаОкончанияДляОС = Проводка.ДатаОкончанияДляОС Тогда
				
				КРаспределению.ВходитВРаспределение = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Удаление строк, которые имеют признак "ВходитВРаспределение" и,
	// таким образом, получаем ТЧ проводок, которые не будут распределены
	Индекс = ЗатратыКРаспределениюОстатки.Количество() - 1;
	Пока Индекс >= 0 Цикл 
		
		Если НЕ ЗатратыКРаспределениюОстатки[Индекс].ВходитВРаспределение Тогда
			
			ЗатратыКРаспределениюОстатки.Удалить(Индекс);	
			
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	// Вывод отчета с использованием внешнего набора данных
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[ДатаИндекс].Значение = Дата;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[ОрганизацияИндекс].Значение = Организация;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	
	ВнешнийНаборДанных = Новый Структура("ТЗДанные", ЗатратыКРаспределениюОстатки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Таблица = Неопределено;
	ТЗНаименованийКонтрагентов = Неопределено;
	
КонецПроцедуры

#КонецОбласти
 
#Область ПрограммныйИнтерфейс
 
Функция СведенияОВнешнейОбработке() Экспорт

    ИмяОтчета = ЭтотОбъект.Метаданные().Имя;
    Синоним = ЭтотОбъект.Метаданные().Синоним;
    Синоним = ?(ЗначениеЗаполнено(Синоним), Синоним, ИмяОтчета);

    РегистрационныеДанные = Новый Структура;
    РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
    РегистрационныеДанные.Вставить("Наименование", Синоним);
    РегистрационныеДанные.Вставить("Версия", "1.0");
    РегистрационныеДанные.Вставить("БезопасныйРежим", Истина);
    РегистрационныеДанные.Вставить("Информация", "Ошибки при предварительном распределении по справкам ЛСЗ.
	|
	|Автор: <ИГС> ПР Потылицын Г.С. #0113, 04.08.2025");

    ТаблицаКоманд = ПолучитьТаблицуКоманд();

    ДобавитьКоманду(ТаблицаКоманд, Синоним, "СформироватьОтчет", "ОткрытиеФормы", Истина);

    РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);

    Возврат РегистрационныеДанные;

КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуКоманд()

    Команды = Новый ТаблицаЗначений;
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

    Возврат Команды;

КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ОткрытиеФормы", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор; 
	
КонецПроцедуры

// Возвращает Индекс параметра
// * КоллекцияЭлементов - область поиска параметров;
// * ИмяПараметра - имя по которому будет осуществляться поиск
Функция ПолучитьИндексПараметра(КоллекцияЭлементов, ИмяПараметра)
	
	Индекс = 0;
	
	Для Каждого Элемент Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если Строка(Элемент.Параметр) = ИмяПараметра Тогда
			Возврат Индекс;
		КонецЕсли;
		
	Индекс = Индекс + 1;
	КонецЦикла;

    Возврат -1;
	
КонецФункции

#КонецОбласти
 