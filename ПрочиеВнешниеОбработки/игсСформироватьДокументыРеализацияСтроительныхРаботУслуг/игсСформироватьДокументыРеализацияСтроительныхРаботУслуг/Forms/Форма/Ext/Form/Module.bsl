
// <ИГС> ПР Потылицын Г.С. #0011 { 

#Область СлужебныйПрограммныйИнтерфейс

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Объект.Дата = ТекущаяДата();
	// <ИГС> ПР Потылицын Г.С. #0012 {
	Объект.Организация = ПолучитьОрганизациюПоУмолчанию();
	// } </ИГС>
	
КонецПроцедуры 

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ВзаимодействиеФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
    ВзаимодействиеФлажки(Истина);
	
КонецПроцедуры  

// Принуждает пользователя выбирать папку 5-й уровня вложенности (Скважину)
&НаКлиенте
Процедура ТаблицаПроектовПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Если СодержитПодгруппы(ВыбранноеЗначение) Тогда  
		
		ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		"Необходимо выбрать группу Проекта, не содержащую дочерних групп!"
		, , "ТаблицаПроектов", "Объект");
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	// Таблица проектов заполняется выборкой запроса
	// Более подробно о выборке можно прочитать перед функцией "ПолучитьТекстЗапроса()"
	Объект.ТаблицаПроектов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса(Ложь);
	
	Запрос.УстановитьПараметр("КонПериода", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счет20", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновноеПроизводство_")); 
	Запрос.УстановитьПараметр("Счет90011", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД"));
	
	Результат = Запрос.Выполнить();

	// Выборка по группировкам
	ВыборкаСкважина = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Скважина");
	
	// Счетчик служит для ориентации в строковй системе ТЧ для вывода сообщения пользователю
	СтрокаСчетчик = 0;                                                       
	
	Пока ВыборкаСкважина.Следующий() Цикл  
		
		// Скважины с нулевым суммарным оборотом по 20-м счетам не попадают в ТЧ
		Если ВыборкаСкважина.ФактическиеЗатраты > 0 Тогда
		
			Строка = Объект.ТаблицаПроектов.Добавить();
			Строка.ФлагАктивности = Истина;   
			Строка.Проект = ВыборкаСкважина.Скважина;
			
			// Выборка по элементам группировки
			ВыборкаНГ = ВыборкаСкважина.Выбрать();
			
			Пока ВыборкаНГ.Следующий() Цикл 
				
				// Поиск элементов, у которых присутствует выручка, но отсутствуют расходы
				Если ВыборкаНГ.ФактическаяВыручка > 0 И ВыборкаНГ.ФактическиеЗатраты = 0 Тогда
							
					ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон("Обратите внимание, что для номенклатурной группы ""%1"" (скважина ""%2"") " + 
					"была зафиксирована выручка, но информация о затратах отсутствует",
					Строка(ВыборкаНГ.НоменклатурнаяГруппа), Строка(ВыборкаСкважина.Скважина)),
					, "ТаблицаПроектов[" + СтрокаСчетчик + "].Проект", "Объект", );
				
				КонецЕсли;	
				
			КонецЦикла;
	
		КонецЕсли;
				
	СтрокаСчетчик = СтрокаСчетчик + 1;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура Заполнить(Команда)
	
	// Организация должна быть заполнена
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		"Пожалуйста, заполните организацию."
		, , "Организация", "Объект", );
		Возврат;
		
	КонецЕсли;
	
	// Дата должна быть заполнена
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		"Пожалуйста, заполните дату."
		, , "Дата", "Объект", );
		Возврат;
		
	КонецЕсли;
	
	// Заполнение ТЧ
	Если Объект.ТаблицаПроектов.Количество() > 0 Тогда
	
		Обещание = ВопросАсинх("Это действие заново заполнит таблицу, удалив текущие данные!" +
		" Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		Результат = Ждать Обещание;
		Если Результат = КодВозвратаДиалога.Да Тогда 
			
	    	ЗаполнитьНаСервере();
			
		КонецЕсли;        
		
	Иначе
		
		ЗаполнитьНаСервере();
		
	КонецЕсли;
		
КонецПроцедуры

// * Проект - скважина, по которой необходимо сформировать/изменить документ
// * ДокументРеализации - возможно, уже существующий документ для этой скважины (для
// этой организации, для этого месяца), иначе создается новый
&НаСервере
Процедура СформироватьДокументыРеализации(Проект, ДокументРеализации)
	
	Попытка 
		
		// Определение Документа
		ДокументРеализации = ?(ЗначениеЗаполнено(ДокументРеализации), ДокументРеализации, Неопределено); 
		
		// Вызов процедуры модуля объекта
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		НовыйДок = ДокументОбъект.СоздатьДокументыРСРиУ(Проект, ДокументРеализации);
		
		// Вывод сообщения-ссылки на новый или же измененный документ
		НачалоСообщения = ?(ДокументРеализации <> Неопределено, "Изменен документ", "Создан новый документ"); 
		
		ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон("%1: ""Реализация строительных работ, услуг %2"", от %3; Нажмите на это сообщение, чтобы открыть документ.", 
		НачалоСообщения, НовыйДок.Ссылка.Номер, Формат(НовыйДок.Дата,"ДФ=dd.MM.yyyy")), НовыйДок);
		
	Исключение  
		
		ОбщегоНазначения.СообщитьПользователю(
		"Не удалось создать документ по проекту """ + Проект.Наименование + """. Причина: " + ОписаниеОшибки());
		
	КонецПопытки;
			
КонецПроцедуры

// <ИГС> ПР Потылицын Г.С. #0012 {

// * МассивПроектов - список проектов, у которых фактические затраты не превышают плановые;
// По этим проектам создаются документы ИмпРеализацияСтроительныхРаботУслуг
&НаСервере
Процедура СформироватьДокументРасчета(МассивПроектов)

	// Вызов процедуры модуля объекта
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ЭтоНовыйДокумент = НЕ ЗначениеЗаполнено(Объект.ДокументРасчета);
	НовыйДок = ДокументОбъект.СоздатьДокументыРВП(МассивПроектов, Объект.ДокументРасчета, ЭтоНовыйДокумент);
	Объект.ДокументРасчета = НовыйДок;
	
	// Проведенный документ может быть как новым, так и уже существующим (измененным)
	Если НовыйДок.Проведен Тогда
		
		НачалоСообщения = ?(ЭтоНовыйДокумент, "Создан новый документ", "Изменен документ");
		ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон("%1: ""Расчет выполнения проектов %2"", от %3; Нажмите на это сообщение, чтобы открыть документ.", 
		НачалоСообщения, НовыйДок.Номер, Формат(НовыйДок.Дата,"ДФ=dd.MM.yyyy")), НовыйДок);
		
	// Может возникнуть ситуация, когда комбинация измерений (организация + проект) является
	// не уникальной для этого месяца; В таком случае, документ не проводится, но записывается
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон("При проведении документа ""Расчет выполнения проектов %1 от %2"" возникла ошибка.
		|Возможно, запись в регистре с такими ключевыми полями уже существует в рамках этого месяца. Документ будет записан. 
		|Нажмите на это сообщение, чтобы открыть документ.", НовыйДок.Номер, Формат(НовыйДок.Дата,"ДФ=dd.MM.yyyy")), НовыйДок);
		
	КонецЕсли;
	
КонецПроцедуры
// } </ИГС>

// Процедура, запускающая процесс формирования/изменения документов
&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	ЗаполнитьДетальнуюТЧ();
	
	// <ИГС> ПР Потылицын Г.С. #0012 {
	МассивПроектов = Новый Массив();
	// } </ИГС>
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		Для Каждого ПроектСтрока Из Объект.ТаблицаПроектов Цикл
			Если ПроектСтрока.ФлагАктивности Тогда
				Если ПроектСтрока.ФактическиеЗатраты > ПроектСтрока.ПлановыеЗатраты Тогда
					
					ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрШаблон("У Проекта ""%1"" фактические затраты превысили плановые! Разница составила: %2 руб.",
					Строка(ПроектСтрока.Проект), ПроектСтрока.ФактическиеЗатраты - ПроектСтрока.ПлановыеЗатраты),
					, "ТаблицаПроектов[" + Строка(ПроектСтрока.НомерСтроки - 1) + "].Проект", "Объект", );
					// <ИГС> ПР Потылицын Г.С. #0012 {
					МассивПроектов.Добавить(ПроектСтрока.НомерСтроки);	
					// } </ИГС>
					
				Иначе
					
					СформироватьДокументыРеализации(ПроектСтрока.Проект, ПроектСтрока.ДокументРеализации);	
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		"Пожалуйста, заполните подразделение организации."
		, , "Подразделение", "Объект", );
		
	КонецЕсли;
	
	// <ИГС> ПР Потылицын Г.С. #0012 {
	Если МассивПроектов.Количество() > 0 Тогда
		
		СформироватьДокументРасчета(МассивПроектов);
			
	КонецЕсли	
	// } </ИГС>
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

 // Возвращает булевое значение, отражающее наличие других подгрупп внутри указанной
&НаСервереБезКонтекста
Функция СодержитПодгруппы(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатурныеГруппы.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
		|ГДЕ
		|	НоменклатурныеГруппы.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
			
	Пока Выборка.Следующий() Цикл 
		
		Если Выборка.ЭтоГруппа Тогда
			Возврат Истина;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции 

// Заполнение детальной ТЧ
// В ней фигурируют элементы Скважины, к каждому из которых расписаны фактическая выручка/затраты
&НаСервере
Процедура ЗаполнитьДетальнуюТЧ()
	
	Объект.ТаблицаПроектовДетальная.Очистить();
	
	// Для второго запроса нужно отобрать только необходимые Скважины
	МассивСкважин = Новый Массив();
	Для Каждого ПроектСтрока Из Объект.ТаблицаПроектов Цикл 
		Если ПроектСтрока.ФлагАктивности Тогда
			МассивСкважин.Добавить(ПроектСтрока.Проект);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса(Истина);	
	
	Запрос.УстановитьПараметр("МассивСкважин", МассивСкважин);
	Запрос.УстановитьПараметр("КонПериода", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Счет20", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОсновноеПроизводство_")); 
	Запрос.УстановитьПараметр("Счет90011", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД"));
	
	Результат = Запрос.Выполнить();
	
	ВыборкаСкважина = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Скважина");
	
	Пока ВыборкаСкважина.Следующий() Цикл
		
		// Заполнение основной ТЧ
		ПроектСтрока = Объект.ТаблицаПроектов.НайтиСтроки(Новый Структура("Проект", ВыборкаСкважина.Скважина))[0];
		ПроектСтрока.ФактическаяВыручка = ВыборкаСкважина.ФактическаяВыручка;
		ПроектСтрока.ФактическиеЗатраты = ВыборкаСкважина.ФактическиеЗатраты;
		ПроектСтрока.ПлановаяВыручка = ВыборкаСкважина.ПлановаяВыручка;
		ПроектСтрока.ПлановыеЗатраты = ВыборкаСкважина.ПлановыеЗатраты;
		ПроектСтрока.НачальныйОстатокВыручки = ВыборкаСкважина.НачальныйОстатокВыручки;
		ПроектСтрока.НачальныйОстатокЗатрат = ВыборкаСкважина.НачальныйОстатокЗатрат;
		
		ВыборкаНГ = ВыборкаСкважина.Выбрать();
		
		Пока ВыборкаНГ.Следующий() Цикл 
			
			// Заполнение дополнительной ТЧ
			Строка = Объект.ТаблицаПроектовДетальная.Добавить();
			Строка.Проект = ВыборкаСкважина.Скважина;
			Строка.НоменклатурнаяГруппа = ВыборкаНГ.НоменклатурнаяГруппа;
			Строка.ФактическаяВыручкаДетально = ВыборкаНГ.ФактическаяВыручка;
			Строка.ФактическиеЗатратыДетально = ВыборкаНГ.ФактическиеЗатраты;
			
		КонецЦикла;
				
	КонецЦикла;
	
	// Для каждой из Скважин необходимо найти существующие Документы Реализации
	// Кроме того, они должны быть с датой установленного месяца и с указанной организацией
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИмпРеализацияСтроительныхРаботУслуг.Ссылка КАК Ссылка,
			|	ИмпРеализацияСтроительныхРаботУслуг.игсПроект КАК Проект
			|ИЗ
			|	Документ.ИмпРеализацияСтроительныхРаботУслуг КАК ИмпРеализацияСтроительныхРаботУслуг
			|ГДЕ
			|	ИмпРеализацияСтроительныхРаботУслуг.игсПроект В(&МассивСкважин)
			|	И ИмпРеализацияСтроительныхРаботУслуг.ПометкаУдаления = ЛОЖЬ
			|	И КОНЕЦПЕРИОДА(ИмпРеализацияСтроительныхРаботУслуг.Дата, МЕСЯЦ) = КОНЕЦПЕРИОДА(&КонПериода, МЕСЯЦ)
			|	И ИмпРеализацияСтроительныхРаботУслуг.Организация = &Организация 
	// <ИГС> ПР Потылицын Г.С. #0012 {
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	игсРасчетВыполненияПроектов.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.игсРасчетВыполненияПроектов КАК игсРасчетВыполненияПроектов
			|ГДЕ
			|	игсРасчетВыполненияПроектов.Дата = &Дата
			|	И игсРасчетВыполненияПроектов.Организация = &Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("МассивСкважин", МассивСкважин);
	Запрос.УстановитьПараметр("КонПериода", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		
		Объект.ТаблицаПроектов.НайтиСтроки(Новый Структура("Проект", Выборка.Проект))[0].ДокументРеализации = Выборка.Ссылка;	
		
	КонецЦикла;
	
	Выборка = Результат[1].Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Объект.ДокументРасчета = Выборка.Ссылка;
		
	КонецЕсли;
	// } </ИГС>
	
КонецПроцедуры

// По результату выполнения запроса получается сгруппированная таблица по Скважинам
// * Условие - при значении "Истина" поддаются поиску Скважины, которые включены в массив &МассивСкважин.
//
// Пример:
// Скважина	НГ		ФактическаяВыручка	ФактическиеЗатраты	ПлановаяВыручка	ПлановыеЗатраты	НачальныйОстатокВыручки	НачальныйОстатокЗатрат
// Имя01	--		90					120					150				100				20						30				
// +		НГ01	30					40				   	150				100				20						30
// +		НГ02	60					80		            150				100				20						30
// ...
//
// ФактическаяВыручка - все то, что было по Счетам №20, ФактическиеЗатраты - по Счету №90.01.1
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапроса(ЗапросСОтборомСкважин) 
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Скважины.Ссылка КАК Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА ЭлементыСкважин.ЭтоГруппа
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоПодгрупп,
		|	игсПлановыеВыручкаИСебестоимостьСрезПоследних.ПлановаяВыручка КАК ПлановаяВыручка,
		|	игсПлановыеВыручкаИСебестоимостьСрезПоследних.ПлановаяСебестоимость КАК ПлановыеЗатраты,
		|	игсНачальныеОстаткиФактическихВыручкиИСебестоимости.НачальныйОстатокВыручки КАК НачальныйОстатокВыручки,
		|	игсНачальныеОстаткиФактическихВыручкиИСебестоимости.НачальныйОстатокСебестоимости КАК НачальныйОстатокЗатрат
		|ПОМЕСТИТЬ Скважины
		|ИЗ
		|	Справочник.НоменклатурныеГруппы КАК ЭлементыСкважин
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК Скважины
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.игсПлановыеВыручкаИСебестоимость.СрезПоследних(НАЧАЛОПЕРИОДА(&КонПериода, МЕСЯЦ), Организация = &Организация) КАК игсПлановыеВыручкаИСебестоимостьСрезПоследних
		|			ПО Скважины.Ссылка = игсПлановыеВыручкаИСебестоимостьСрезПоследних.Скважина
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.игсНачальныеОстаткиФактическихВыручкиИСебестоимости КАК игсНачальныеОстаткиФактическихВыручкиИСебестоимости
		|			ПО Скважины.Ссылка = игсНачальныеОстаткиФактическихВыручкиИСебестоимости.Скважина
		|		ПО ЭлементыСкважин.Родитель = Скважины.Ссылка
		|ГДЕ
		|	Скважины.игсПроектЗакрыт = ЛОЖЬ
		|	И Скважины.ЭтоГруппа = ИСТИНА
		|	И ЕСТЬNULL(Скважины.Родитель.Родитель.Родитель.Родитель.Родитель, ИСТИНА) <> ИСТИНА
		|	И ЕСТЬNULL(Скважины.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель, ИСТИНА) = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	Скважины.Ссылка,
		|	игсПлановыеВыручкаИСебестоимостьСрезПоследних.ПлановаяВыручка,
		|	игсПлановыеВыручкаИСебестоимостьСрезПоследних.ПлановаяСебестоимость,
		|	игсНачальныеОстаткиФактическихВыручкиИСебестоимости.НачальныйОстатокВыручки,
		|	игсНачальныеОстаткиФактическихВыручкиИСебестоимости.НачальныйОстатокСебестоимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Субконто20,
		|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаОборот20
		|ПОМЕСТИТЬ Скважины20
		|ИЗ
		|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(, &КонПериода, Период, Счет В ИЕРАРХИИ (&Счет20), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|		ПО НоменклатурныеГруппы.Ссылка = ХозрасчетныйОбороты.Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Субконто90011,
		|	ХозрасчетныйОбороты.СуммаОборот КАК СуммаОборот90011
		|ПОМЕСТИТЬ Скважины90011
		|ИЗ
		|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(, &КонПериода, Период, Счет = &Счет90011, , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|		ПО НоменклатурныеГруппы.Ссылка = ХозрасчетныйОбороты.Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Скважины.Ссылка КАК Скважина,
		|	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа,
		|	ЕСТЬNULL(Скважины90011.СуммаОборот90011, 0) КАК ФактическаяВыручка,
		|	ЕСТЬNULL(Скважины20.СуммаОборот20, 0) КАК ФактическиеЗатраты,
		|	Скважины.ПлановаяВыручка КАК ПлановаяВыручка,
		|	Скважины.ПлановыеЗатраты КАК ПлановыеЗатраты,
		|	Скважины.НачальныйОстатокВыручки КАК НачальныйОстатокВыручки,
		|	Скважины.НачальныйОстатокЗатрат КАК НачальныйОстатокЗатрат
		|ИЗ
		|	Скважины КАК Скважины
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Скважины20 КАК Скважины20
		|			ПО НоменклатурныеГруппы.Ссылка = Скважины20.Субконто20
		|			ЛЕВОЕ СОЕДИНЕНИЕ Скважины90011 КАК Скважины90011
		|			ПО НоменклатурныеГруппы.Ссылка = Скважины90011.Субконто90011
		|		ПО (НоменклатурныеГруппы.Родитель = Скважины.Ссылка)
		|ГДЕ
		|	Скважины.КоличествоПодгрупп = 0 &УсловиеСкважин
		|
		|СГРУППИРОВАТЬ ПО
		|	Скважины.Ссылка,
		|	НоменклатурныеГруппы.Ссылка,
		|	ЕСТЬNULL(Скважины20.СуммаОборот20, 0),
		|	ЕСТЬNULL(Скважины90011.СуммаОборот90011, 0),
		|	Скважины.ПлановаяВыручка,
		|	Скважины.НачальныйОстатокВыручки,
		|	Скважины.НачальныйОстатокЗатрат,
		|	Скважины.ПлановыеЗатраты
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НоменклатурнаяГруппа),
		|	СУММА(ФактическаяВыручка),
		|	СУММА(ФактическиеЗатраты),
		|	СРЕДНЕЕ(ПлановаяВыручка),
		|	СРЕДНЕЕ(ПлановыеЗатраты),
		|	СРЕДНЕЕ(НачальныйОстатокВыручки),
		|	СРЕДНЕЕ(НачальныйОстатокЗатрат)
		|ПО
		|	Скважина";
	
	Если ЗапросСОтборомСкважин Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСкважин" , "И Скважины.Ссылка В (&МассивСкважин)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСкважин" , "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает значение для каждой строки основной ТЧ
&НаКлиенте
Процедура ВзаимодействиеФлажки(Значение)  
	
	Для Каждого ПроектСтрока Из Объект.ТаблицаПроектов Цикл
	
		ПроектСтрока.ФлагАктивности = Значение;	
		
	КонецЦикла;
	
КонецПроцедуры

// <ИГС> ПР Потылицын Г.С. #0012 {
// Возвращает организацию, установленную по умолчанию
&НаСервереБезКонтекста
Функция ПолучитьОрганизациюПоУмолчанию()

	Возврат ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
	
КонецФункции
// } </ИГС>
#КонецОбласти

// } </ИГС>