Функция СведенияОВнешнейОбработке() Экспорт     
	
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ПечатнаяФорма, ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Таблица проводок (внешняя)"); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
	ПараметрыРегистрации.Вставить("Версия", "1.0"); 
	ПараметрыРегистрации.Вставить("Информация", ""); 
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "ПечатнаяФорма", "ПечатнаяФорма", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));//как будет выглядеть описание печ.формы для пользователя
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); //имя макета печ.формы
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды; 
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление        = Представление; 
	НоваяКоманда.Идентификатор        = Идентификатор;
	НоваяКоманда.Использование        = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор          = Модификатор;
КонецПроцедуры

Функция ЗаполнитьМакет(Ссылка) Экспорт
	
	ДокИмя = Ссылка.Метаданные().Имя;
	ДокСиноним = Ссылка.Метаданные().Синоним;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.Организация,
	|	Док.Номер,
	|	Док.Дата
	|ИЗ
	|	Документ." + ДокИмя + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Док = Запрос.Выполнить().Выбрать();
	Док.Следующий();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация КАК Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт КАК ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт КАК ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт КАК КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт КАК КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание,
	|	ХозрасчетныйДвиженияССубконто.Период КАК МежотчетныйПериод,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт КАК ПодразделениеДт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт КАК ПодразделениеКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаДвижений = Запрос.Выполнить().Выбрать();
	
	Макет = Документы.ОперацияБух.ПолучитьМакет("ПФ_MXL_БухгалтерскаяСправка");
	
	// Получаем области макета для вывода в табличный документ.
	ШапкаДокумента   = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы    = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодвалДокумента  = Макет.ПолучитьОбласть("Подвал");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по умолчанию.
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	// Загрузим настройки пользователя.
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЖурналПроводок";

	// Выведем шапку документа.
	 	МежотчетныйПериод = ?(Док.Дата<>Дата(1,1,1), СтрШаблон(" %1", НСтр("ru = '(межотчетный период)'")), "");
        СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Док.Организация, Док.Дата);

		СтруктураШапки = Новый Структура;
		СтруктураШапки.Вставить("Организация",    ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации));
		СтруктураШапки.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Док.Номер, Истина, Ложь));
		СтруктураШапки.Вставить("ДатаДокумента",  Формат(Док.Дата, "ДЛФ=D") + МежотчетныйПериод);
		ШапкаДокумента.Область("R4C1").Текст	= ДокСиноним + " [НомерДокумента] от [ДатаДокумента]";

	    ШапкаДокумента.Область("R6:R7").Видимость = Ложь;  
	
		ШапкаДокумента.Параметры.Заполнить(СтруктураШапки);
		ТабДокумент.Вывести(ШапкаДокумента);
	
	// Выведем заголовок таблицы.
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выведем строки документа.
	Пока ВыборкаДвижений.Следующий() Цикл
		
		СтрокаТаблицы.Параметры.Заполнить(ВыборкаДвижений);
		
		АналитикаДт = ?(ЗначениеЗаполнено(ВыборкаДвижений.ПодразделениеДт), Строка(ВыборкаДвижений.ПодразделениеДт) + Символы.ПС, "")
		+ ?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоДт1), Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС, "")
		+ ?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоДт2), Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС, "")
		+ ?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоДт3), Строка(ВыборкаДвижений.СубконтоДт3), "");
		
		АналитикаКт = ?(ЗначениеЗаполнено(ВыборкаДвижений.ПодразделениеКт), Строка(ВыборкаДвижений.ПодразделениеКт) + Символы.ПС, "")
		+ ?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоКт1), Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС, "")
		+ ?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоКт2), Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС, "")
		+ ?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоКт3), Строка(ВыборкаДвижений.СубконтоКт3), "");
		
		СтруктураАналитики = Новый Структура("АналитикаДт,АналитикаКт", АналитикаДт, АналитикаКт);
		СтрокаТаблицы.Параметры.Заполнить(СтруктураАналитики);
		
		// Проверим, помещается ли строка с подвалом.
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(СтрокаТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалТаблицы);
		СтрокаСПодвалом.Добавить(ПодвалДокумента);
		ТабДокумент.Вывести(СтрокаТаблицы);
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			// Выведем подвал таблицы.
			ТабДокумент.Вывести(ПодвалТаблицы);
			
			// Выведем разрыв страницы.
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Выведем заголовок таблицы.
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;		

	КонецЦикла;
	
	// Выведем подвал таблицы.
	ТабДокумент.Вывести(ПодвалТаблицы);
	
	// Выведем подвал документа. 
	Если ОбщегоНазначения.СсылкаСуществует(Ссылка.Ответственный) Тогда
	ПодвалДокумента.Параметры.РасшифровкаПодписиИсполнителя = 
	?(НЕ ЗначениеЗаполнено(Ссылка.Ответственный), "", ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалыФизЛица(Ссылка.Ответственный.ФизЛицо));  
	КонецЕсли;
	ТабДокумент.Вывести(ПодвалДокумента);
	
	Возврат ТабДокумент;

КонецФункции


