
Функция СведенияОВнешнейОбработке() Экспорт 
	
	ПараметрыРегистрации = Новый Структура; 
	
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.игсРеестрыНаОплату");  
	
	ПараметрыРегистрации.Вставить("Вид", "СозданиеСвязанныхОбъектов");  
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Выгрузка реестра на оплату в ExceL"); 
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Версия", "1.2"); 
	ПараметрыРегистрации.Вставить("Информация", ""); 
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд, "Выгрузка реестра на оплату в ExceL", "ВыгрузкаРеестраНаОплатуВExcel", "ОткрытиеФормы", Истина, "ПечатьMXL");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()  
	
	Команды = 											Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", 			Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Использование", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", 	Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", 			Новый ОписаниеТипов("Строка")); 
	
	Возврат Команды;  
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")   
	
	НоваяКоманда 						= ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление 			= Представление; 
	НоваяКоманда.Идентификатор 			= Идентификатор;
	НоваяКоманда.Использование 			= Использование;
	НоваяКоманда.ПоказыватьОповещение 	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор 			= Модификатор;
	
КонецПроцедуры

&НаСервере
Функция ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибкеФункции, Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибкеФункции);
	
	Если Файл <> Неопределено Тогда 
		
		СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + Нстр("ru = 'Ссылка на файл: '");
		СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьНавигационнуюСсылку(Файл); 
		
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Истина; 
	
	ФайлОбъект = ПрисоединенныйФайл.Получитьобъект();
	
	Попытка  
		
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла); 
		
	Исключение  
		
		СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
		
		ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя], ПрисоединенныйФайл, СообщениеОбОшибке);
	КонецПопытки;
	
	ДополнительнаяИнформация = Новый Структура("СсылкаНаДвоичныеДанныеФайла, ИмяФайла, Наименование, Расширение");
	ДополнительнаяИнформация.СсылкаНаДвоичныеДанныеФайла  = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
	ДополнительнаяИнформация.ИмяФайла                     = ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение;
	ДополнительнаяИнформация.Наименование                 = ФайлОбъект.Наименование;
	ДополнительнаяИнформация.Расширение                   = ФайлОбъект.Расширение; 
	
	Возврат ДополнительнаяИнформация;
	
КонецФункции

&НаСервере
Функция СФормироватьРеестр() Экспорт
	
	РезультатВозврата = Новый Структура;
	РезультатВозврата.Вставить("ТабличныйДокумент");
	РезультатВозврата.Вставить("Вложения");
	
	МассивЗаявок = Заявки.ВыгрузитьКолонку("Заявка");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	игсЗаявкаНаОплату.Ссылка КАК Заявка
		|ПОМЕСТИТЬ ВТЗаявки
		|ИЗ
		|	Документ.игсЗаявкаНаОплату КАК игсЗаявкаНаОплату
		|ГДЕ
		|	игсЗаявкаНаОплату.Ссылка В(&МассивЗаявок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	игсЗаявкаНаОплату.Ссылка КАК Заявка,
		|	игсЗаявкаНаОплату.Организация КАК Организация,
		|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
		|	ЕСТЬNULL(ПлатежноеПоручение.Номер, """") КАК НомерПП,
		|	ЕСТЬNULL(ПлатежноеПоручение.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПП,
		|	СписаниеСРасчетногоСчета.Дата КАК ДатаОплатыПП,
		|	игсЗаявкаНаОплату.Контрагент КАК Контрагент,
		|	игсЗаявкаНаОплату.Контрагент.ИНН КАК КонтрагентИНН,
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(игсЗаявкаНаОплату.Контрагент.НаименованиеПолное, 1, 150) = """"
		|			ТОГДА игсЗаявкаНаОплату.Контрагент.Наименование
		|		ИНАЧЕ игсЗаявкаНаОплату.Контрагент.НаименованиеПолное
		|	КОНЕЦ КАК КонтрагентНаименованиеПолное,
		|	игсЗаявкаНаОплату.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
		|	игсЗаявкаНаОплату.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	игсЗаявкаНаОплату.ДоговорКонтрагента.Дата КАК ДоговорКонтрагентаДатаНачалаДоговора,
		|	игсЗаявкаНаОплату.ДоговорКонтрагента.Номер КАК ДоговорКонтрагентаНомер,
		|	игсЗаявкаНаОплату.ДоговорКонтрагента.игсПредметДоговора КАК ДоговорКонтрагентаигсПредметДоговора,
		|	игсЗаявкаНаОплату.НазначениеПлатежа КАК НазначениеПлатежаЗРДС,
		|	ВЫБОР
		|		КОГДА игсЗаявкаНаОплату.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ИГсВидыОплатЗРДС.Предоплата)
		|			ТОГДА ""Аванс""
		|		ИНАЧЕ ""Погашение задолженности""
		|	КОНЕЦ КАК ВидОплатыЗРДС,
		|	ЕСТЬNULL(ПлатежноеПоручение.СуммаДокумента, 0) КАК СуммаПП,
		|	ЕСТЬNULL(ПлатежноеПоручение.ВалютаДокумента, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаПП,
		|	игсЗаявкаНаОплату.СуммаДокумента КАК СуммаЗРДС,
		|	игсЗаявкаНаОплату.СуммаНДС КАК СуммаНДСЗРДС,
		|	игсЗаявкаНаОплату.ВалютаДокумента КАК ВалютаЗРДС,
		|	игсЗаявкаНаОплату.Номер КАК НомерЗРДС,
		|	игсЗаявкаНаОплату.Ответственный КАК ИнициаторЗРДС,
		|	игсЗаявкаНаОплату.ДокументыРасчетов.(ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом) КАК ДокументыРасчетовСКонтрагентомЗРДС
		|ИЗ
		|	ВТЗаявки КАК ВТЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.игсЗаявкаНаОплату КАК игсЗаявкаНаОплату
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|			ПО (ПлатежноеПоручение.игсСсылкаЗаявкаНаОплату = игсЗаявкаНаОплату.Ссылка)
		|				И (ПлатежноеПоручение.Проведен)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|			ПО (ПлатежноеПоручение.Ссылка = СписаниеСРасчетногоСчета.ДокументОснование)
		|		ПО ВТЗаявки.Заявка = игсЗаявкаНаОплату.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	игсЗаявкаНаОплату.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЗаявки.Заявка КАК Заявка,
		|	игсЗаявкаНаОплатуПрисоединенныеФайлы.Ссылка КАК ДополнительнаяИфнормацияСсылка
		|ИЗ
		|	ВТЗаявки КАК ВТЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.игсЗаявкаНаОплатуПрисоединенныеФайлы КАК игсЗаявкаНаОплатуПрисоединенныеФайлы
		|		ПО ВТЗаявки.Заявка = игсЗаявкаНаОплатуПрисоединенныеФайлы.ВладелецФайла
		|ГДЕ
		|	НЕ игсЗаявкаНаОплатуПрисоединенныеФайлы.ПометкаУдаления";  
	
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	
	РезультатыПакета = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыПакета[1].Выбрать(); 
	
	ТаблицаДопИнформации = РезультатыПакета[2].Выгрузить();
	ТаблицаДопИнформации.Индексы.Добавить("Заявка");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("MXL_Реестр");
	
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
	
	ВременныйКаталог = КаталогВременныхФайлов()+ "Реестр_" + СтрЗаменить(XMLСтрока(Новый УникальныйИдентификатор), "-", "_") + "\"; 
	
	СоздатьКаталог(ВременныйКаталог);
	
	ПредставленияВалют = МэппингПредставленийВалют();
	
	ВложенияСтрокРеестра = Новый Соответствие;
	
	НомерПоПорядку = 1;
	
	Пока Выборка.Следующий() Цикл 
		
		ОбластьСтрокаТаблицы.Параметры.Заполнить(Выборка);
		
		ОбластьСтрокаТаблицы.Параметры.НомерПоПорядку = XMLСтрока(НомерПоПорядку);
		
		Если ЗначениеЗаполнено(Выборка.ПлатежноеПоручение) Тогда
			ОбластьСтрокаТаблицы.Параметры.НомерПП = Выборка.ПлатежноеПоручение.номер;
		КонецЕсли;	
		
		ВыборкаРасчетов = Выборка.ДокументыРасчетовСКонтрагентомЗРДС.Выбрать(); 
		
		Пока ВыборкаРасчетов.Следующий() Цикл 
			
			Если ЗначениеЗаполнено(ВыборкаРасчетов.ДокументРасчетовСКонтрагентом) Тогда 
				
				Если ТипЗнч(ВыборкаРасчетов.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
					И ВыборкаРасчетов.ДокументРасчетовСКонтрагентом.Проведен Тогда
					
					ОбластьСтрокаТаблицы.Параметры.АктНакладнаяСФ = ?(ВыборкаРасчетов.ДокументРасчетовСКонтрагентом.Услуги.Количество() > 0, "Акт", "Накладная");
					ОбластьСтрокаТаблицы.Параметры.НомерВходящегоДокумента 	= ВыборкаРасчетов.ДокументРасчетовСКонтрагентом.НомерВходящегоДокумента;
					ОбластьСтрокаТаблицы.Параметры.ДатаВходящегоДокумента 	=  ВыборкаРасчетов.ДокументРасчетовСКонтрагентом.ДатаВходящегоДокумента;
					
				ИначеЕсли ТипЗнч(ВыборкаРасчетов.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ПоступлениеДопРасходов")
					И ВыборкаРасчетов.ДокументРасчетовСКонтрагентом.Проведен Тогда
					
					ОбластьСтрокаТаблицы.Параметры.АктНакладнаяСФ = ?(ВыборкаРасчетов.ДокументРасчетовСКонтрагентом.ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации, "Акт", "Накладная");
					ОбластьСтрокаТаблицы.Параметры.НомерВходящегоДокумента 	= ВыборкаРасчетов.ДокументРасчетовСКонтрагентом.НомерВходящегоДокумента;
					ОбластьСтрокаТаблицы.Параметры.ДатаВходящегоДокумента 	=  ВыборкаРасчетов.ДокументРасчетовСКонтрагентом.ДатаВходящегоДокумента;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(Выборка.ВалютаПП.Код) И ПредставленияВалют[Выборка.ВалютаПП.Код] <> Неопределено Тогда
			ОбластьСтрокаТаблицы.Параметры.ВалютаПП = ПредставленияВалют[Выборка.ВалютаПП.Код];
		КонецЕсли;  
		
		Если ПредставленияВалют[Выборка.ВалютаЗРДС.Код] <> Неопределено Тогда
			ОбластьСтрокаТаблицы.Параметры.ВалютаЗРДС = ПредставленияВалют[Выборка.ВалютаЗРДС.Код];
		КонецЕсли;
		
		// Подготовим вложения
		Файлы = Новый Массив;  
		
		СтрокиДопИнформации = ТаблицаДопИнформации.НайтиСтроки(Новый Структура("Заявка", Выборка.Заявка)); 
		
		НомерФайла = 1;  
		
		Для Каждого СтрокаДопИнформации Из СтрокиДопИнформации Цикл 
			
			ДопИнформация  		= ПолучитьДанныеФайла(СтрокаДопИнформации.ДополнительнаяИфнормацияСсылка, СтрокаДопИнформации.ДополнительнаяИфнормацияСсылка.УникальныйИдентификатор()); 
			
			ДвоичныеДанные 		= ПолучитьИзВременногоХранилища(ДопИнформация.СсылкаНаДвоичныеДанныеФайла);
			
			ИмяФайлаВложения 	= ДопИнформация.ИмяФайла;
			
			МассивПодстрок 		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайлаВложения, "\");
			
			ИмяФайлаВложения 	= МассивПодстрок[МассивПодстрок.ВГраница()];
			
			Если ТипЗнч(ДвоичныеДанные) = Тип("Картинка") Тогда 
				
				МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайлаВложения, ".");
				// расширение не задано
				Если МассивПодстрок.Количество() = 1 Тогда 
					
					Если ДвоичныеДанные.Формат() = ФорматКартинки.НеизвестныйФормат Тогда
						РасширениеФайлаВложения = "UNKNOWN";
					Иначе
						РасширениеФайлаВложения = Строка(ДвоичныеДанные.Формат());
					КонецЕсли; 
					
					ИмяФайлаВложения = ИмяФайлаВложения + "." + РасширениеФайлаВложения; 
					
				КонецЕсли;
				
			КонецЕсли;	
			
			ПолныйПутьКФайлу = ВременныйКаталог + XMLСтрока(НомерФайла) + "#" + ИмяФайлаВложения; 
			
			ДвоичныеДанные.Записать(ПолныйПутьКФайлу);
			
			Файлы.Добавить(ПолныйПутьКФайлу); 
			
			НомерФайла = НомерФайла + 1; 
			
		КонецЦикла;  
		
		Если Файлы.Количество() > 0 Тогда 
			
			ИмяФайлаАрхива = ВременныйКаталог + XMLСтрока(НомерПоПорядку) + ".zip";
			
			ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяФайлаАрхива); 
			
			Для Каждого Файл Из Файлы Цикл
				ЗаписьZipФайла.Добавить(Файл);
			КонецЦикла; 
			
			ЗаписьZipФайла.Записать();
			
			ВложенияСтрокРеестра.Вставить(НомерПоПорядку, Новый Структура("ИмяФайлаАрхива, ДвоичныеДанные", XMLСтрока(НомерПоПорядку) + ".zip", Новый ДвоичныеДанные(ИмяФайлаАрхива)));
			
			Файлы.Добавить(ИмяФайлаАрхива);
			
			Для Каждого Файл Из Файлы Цикл
				УдалитьФайлы(Файл);
			КонецЦикла; 
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);  
		
		НомерПоПорядку = НомерПоПорядку + 1;
		
	КонецЦикла;	
	
	Файл = Новый Файл(ВременныйКаталог); 
	
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;	
	
	РезультатВозврата.ТабличныйДокумент = ТабличныйДокумент;
	РезультатВозврата.Вложения 			= ВложенияСтрокРеестра;
	
	Возврат РезультатВозврата;
	
КонецФункции

&НаСервере
Функция МэппингПредставленийВалют()
	
	Мэп = Новый Соответствие;
	
	ПарыКлючЗначение = "643=RUB,978=EUR,933=BYN,840=USD,156=CNY";   
	
	МассивПар = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПарыКлючЗначение, ","); 
	
	Для Каждого ПараКлючаЗначения Из МассивПар Цикл  
		
		ПозицияРазделителя = Найти(ПараКлючаЗначения, "="); 
		
		Мэп.Вставить(Лев(ПараКлючаЗначения, ПозицияРазделителя - 1), Прав(ПараКлючаЗначения, СтрДлина(ПараКлючаЗначения) - ПозицияРазделителя)); 
		
	КонецЦикла;
	
	Возврат Мэп;
	
КонецФункции