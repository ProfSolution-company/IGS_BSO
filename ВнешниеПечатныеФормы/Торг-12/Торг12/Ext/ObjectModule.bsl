//Функции для доработки взяты из общего модуля "ПечатьТорговыхДокументов"


Функция СведенияОВнешнейОбработке() Экспорт     
	
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.РеализацияТоваровУслуг"); //Указываем документ к которому делаем внешнюю печ. форму
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ПечатнаяФорма, ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Торг-12Литры+Тонны"); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
	ПараметрыРегистрации.Вставить("Версия", "1.0"); 
	ПараметрыРегистрации.Вставить("Информация", ""); 
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "Торг-12 литры+тонны", "Торг-12Литры+Тонны", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции
Функция ПолучитьТаблицуКоманд()
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));//как будет выглядеть описание печ.формы для пользователя
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); //имя макета печ.формы
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды; 
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление; 
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Функция Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	СсылкаНаОбъект = МассивОбъектов[0];
	Организация = СсылкаНаОбъект.Организация;
	ПараметрыПечати = новый Структура;
	ВключатьУслуги = Ложь;
	ТаблицаСведенийТОРГ12 = ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
	ПараметрыПечати.Вставить("ИмяПараметровПечати", "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12");
	ДокументдляПечати = ПечатьТОРГ12(ТаблицаСведенийТОРГ12, ОбъектыПечати, ПараметрыПечати);	
	//Возврат ДокументдляПечати; Оставлен для отладки
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ-12ЛИТРЫ+ТОННЫ", "ТОРГ-12 (Товарная накладная)",
		ДокументДляПечати,,"ТОРГ_12");

    Возврат ДокументдляПечати
КонецФункции      

Функция ПолучитьТаблицуСведенийТОРГ12(Знач МассивДокументов, Знач ВключатьУслуги) 
	
	
	ТаблицаСведений = ПечатьТорговыхДокументов.ПолучитьОписаниеТОРГ12();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивДокументов", 	МассивДокументов);
	Запрос.УстановитьПараметр("ВключатьУслуги", 	ВключатьУслуги);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийТОРГ12();
	УстановитьПривилегированныйРежим(Истина);	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(ЛОжь);
	ВалютаРегУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	РеквизитыВалютыРегУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВалютаРегУчета, "Код, Наименование");
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	СтрокиДокументов = РезультатыЗапроса[3].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		СведенияОДокументе.Валюта             = ВалютаРегУчета;
		СведенияОДокументе.ВалютаКод          = РеквизитыВалютыРегУчета.Код;
		СведенияОДокументе.ВалютаНаименование = РеквизитыВалютыРегУчета.Наименование;
		
		ТаблицаДокумента = ПолучитьОписаниеТаблицыТОРГ12();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		НуженПересчетВРубли = НЕ (Выборка.ВалютаДокумента = ВалютаРегУчета);
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
			Если НуженПересчетВРубли Тогда
				Если Строка.СуществуютЗаписиРублевыхСумм Тогда
					СтрокаТаблицыДокумента.СуммаНДС 	= Строка.НДСВРублях;
					СтрокаТаблицыДокумента.СуммаБезНДС 	= Строка.ВсегоВРублях - Строка.НДСВРублях;
				Иначе
					Кратность = ?(Выборка.Кратность   	= 0, 1, Выборка.Кратность);
					СтрокаТаблицыДокумента.СуммаНДС 	= Строка.СуммаНДС * Выборка.Курс / Кратность;;
					СтрокаТаблицыДокумента.СуммаБезНДС  = (Строка.СуммаБезНДС + Строка.СуммаНДС) * Выборка.Курс / Кратность - СтрокаТаблицыДокумента.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыДокумента.СуммаСНДС = СтрокаТаблицыДокумента.СуммаБезНДС + СтрокаТаблицыДокумента.СуммаНДС;
			
			Если НуженПересчетВРубли 
					ИЛИ (Выборка.СуммаВключаетНДС И СтрокаТаблицыДокумента.СуммаНДС <> 0) Тогда
				СтрокаТаблицыДокумента.Цена = ?(СтрокаТаблицыДокумента.Количество = 0,
					СтрокаТаблицыДокумента.СуммаБезНДС,
					СтрокаТаблицыДокумента.СуммаБезНДС / СтрокаТаблицыДокумента.Количество);
			КонецЕсли;
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя, ЗаполнятьГлавногоБухгалтера, ЗаполнятьКладовщика");
		ПечатьТорговыхДокументов.ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения);
		
		Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(СведенияОДокументе.Организация) Тогда
			СтатусФизическогоЛица = Справочники.Организации.СтатусФизическогоЛицаНаДату(
				СведенияОДокументе.Организация, СведенияОДокументе.ДатаДляПолученияСведений);
			Если СтатусФизическогоЛица = Перечисления.СтатусыФизическихЛиц.Самозанятый Тогда
				СведенияОДокументе.РуководительДолжностьНаименование = "";
			Иначе
				ИндивидуальныйПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.Организация, "ИндивидуальныйПредприниматель");
				Если ИндивидуальныйПредприниматель = СведенияОДокументе.Руководитель Тогда
					СведенияОДокументе.РуководительДолжностьНаименование = "Индивидуальный предприниматель";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийТОРГ12()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор КАК Регистратор,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего КАК Всего,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС КАК НДС,
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.НалоговаяБазаНДС КАК НалоговаяБазаНДС
	|ПОМЕСТИТЬ РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|ГДЕ
	|	РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДляПолученияСведений,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Дата КАК ДатаПодписанияДокумента,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Организация.ОбособленноеПодразделение
	|			ТОГДА РеализацияТоваровУслуг.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ РеализацияТоваровУслуг.Организация
	|	КОНЕЦ КАК Поставщик,
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК Подразделение,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетПродавца,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента КАК Договор,
	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК ДокументОснование,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Представление КАК Основание,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ГосударственныйКонтракт КАК ГосударственныйКонтрактСсылка,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ГосударственныйКонтракт.Код КАК ГосударственныйКонтракт,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.УчетАгентскогоНДСПокупателем КАК НДСИсчисляетсяНалоговымАгентом,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	РеализацияТоваровУслуг.ОтпускПроизвел КАК Кладовщик,
	|	РеализацияТоваровУслуг.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
	|	РеализацияТоваровУслуг.ЗаГлавногоБухгалтераНаОсновании КАК ЗаГлавногоБухгалтераНаОсновании,
	|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
	|	РеализацияТоваровУслуг.Товары.(
	|		игсКоэффициентПересчета КАК игсКоэффициентПересчета
	|	) КАК Товары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РеализацияТоваровУслуг.Организация = ДанныеПервичныхДокументов.Организация
	|			И РеализацияТоваровУслуг.Ссылка = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыДляПечати.Ссылка
	|			ИЗ
	|				ДокументыДляПечати КАК ДокументыДляПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары) КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура КАК Товар,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ КАК ТоварКод,
	|	РеализацияТоваровУслуг.Количество КАК Количество,
	|	РеализацияТоваровУслуг.КоличествоМест КАК КоличествоМест,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ВидУпаковки,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения.Код, """") КАК ВидУпаковкиКод,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.ЕдиницаИзмерения.Наименование, """") КАК ВидУпаковкиНаименование,
	|	РеализацияТоваровУслуг.Коэффициент КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	РеализацияТоваровУслуг.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0) КАК ВсегоВРублях,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0) КАК НДСВРублях,
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуютЗаписиРублевыхСумм,
	|	РеализацияТоваровУслуг.НомерГТД.Код КАК НомерТД,
	|	РеализацияТоваровУслуг.СтранаПроисхождения.Код КАК КодСтраныПроисхождения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.игсКоэффициентПересчета <> 0
	|			ТОГДА РеализацияТоваровУслуг.Количество * РеализацияТоваровУслуг.игсКоэффициентПересчета / 1000
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПерерасчет,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.игсКоэффициентПересчета <> 0
	|			ТОГДА РеализацияТоваровУслуг.Цена / РеализацияТоваровУслуг.игсКоэффициентПересчета * 1000
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаПерерасчет,
	|	РеализацияТоваровУслуг.игсКоэффициентПересчета КАК игсКоэффициентПересчета
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Товары))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ВозвратнаяТара),
	|	2,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	0,
	|	NULL,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ВозвратнаяТара))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги),
	|	3,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	РеализацияТоваровУслуг.Цена,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.Услуги))
	|ГДЕ
	|	&ВключатьУслуги = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги),
	|	4,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Код
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	0,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	РеализацияТоваровУслуг.Цена,
	|	ВЫБОР
	|		КОГДА ДокументыДляПечати.СуммаВключаетНДС
	|			ТОГДА РеализацияТоваровУслуг.Сумма - РеализацияТоваровУслуг.СуммаНДС
	|		ИНАЧЕ РеализацияТоваровУслуг.Сумма
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.Всего, 0),
	|	ЕСТЬNULL(РегистрСведенийРублевыеСуммыДокументовВВалюте.НДС, 0),
	|	ВЫБОР
	|		КОГДА РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|		ПО ДокументыДляПечати.Ссылка = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведенийРублевыеСуммыДокументовВВалюте КАК РегистрСведенийРублевыеСуммыДокументовВВалюте
	|		ПО (РеализацияТоваровУслуг.Ссылка = РегистрСведенийРублевыеСуммыДокументовВВалюте.Регистратор)
	|			И (РеализацияТоваровУслуг.НомерСтроки = РегистрСведенийРублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента)
	|			И (РегистрСведенийРублевыеСуммыДокументовВВалюте.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.АгентскиеУслуги))
	|ГДЕ
	|	&ВключатьУслуги = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыТОРГ12() 
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
	ОписаниеТиповЧисло10_4 = ОбщегоНазначения.ОписаниеТипаЧисло(10, 4);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТабличнаяЧасть", 				 Новый ОписаниеТипов("ПеречислениеСсылка.ТабличныеЧастиДокументов"));
	Таблица.Колонки.Добавить("НомерСтроки", 				 ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Таблица.Колонки.Добавить("Товар", 						 Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("ТоварНаименование", 			 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТоварКод", 					 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Количество", 					 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоМест", 				 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("КоличествоВОдномМесте", 		 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",          Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидУпаковки",                  Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ВидУпаковкиКод",               Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидУпаковкиНаименование",      Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("МассаБрутто", 				 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("Цена",						 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаБезНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СуммаСНДС",					 ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", 					 Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Таблица.Колонки.Добавить("НомерТД", 					 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КодСтраныПроисхождения",		 Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КоличествоПерерасчет", 		 ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("ЦенаПерерасчет",				 ОписаниеТиповЧисло15_2); 
	Таблица.Колонки.Добавить("игсКоэффициентПересчета",		 ОписаниеТиповЧисло10_4);


	Возврат Таблица;
	
КонецФункции

Функция ПечатьТОРГ12(СведенияТОРГ12, ОбъектыПечати, ПараметрыПечати) 
	
	
	
	ИмяПараметровПечати = ПараметрыПечати.ИмяПараметровПечати;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
	
	ТабличныйДокумент.КлючПараметровПечати = ИмяПараметровПечати;
	
	УстановитьМинимальныеПоляПечати(ТабличныйДокумент);
	
	Макет = ЭтотОбъект.ПолучитьМакет("ТОРГ_12");
	
	ЕстьОбластьГосконтракты = (Макет.Области.Найти("ДатаНомерГосконтракт") <> Неопределено);
	
	СведенияОКонтрагентах = Новый ТаблицаЗначений;
	СведенияОКонтрагентах.Колонки.Добавить("КонтрагентИзДокумента");
	СведенияОКонтрагентах.Колонки.Добавить("ДатаДляПолученияСведений");
	СведенияОКонтрагентах.Колонки.Добавить("БанковскийСчетПродавца");
	СведенияОКонтрагентах.Колонки.Добавить("СведенияОКонтрагенте");
	ОтборСведений = Новый Структура("КонтрагентИзДокумента,ДатаДляПолученияСведений,БанковскийСчетПродавца");
	
	ПервыйДокумент = Истина;
	КонтрагентыДляПечати = Новый Структура("Поставщик, Грузоотправитель, Покупатель, Грузополучатель");
	Для Каждого СведенияОДокументе Из СведенияТОРГ12 Цикл
		
		// {{ ПрофРешение Брикотнин М.А. - 29.10.2025 - #Задача № 0147
		игсЭтоИГСАвто = СведенияОДокументе.Поставщик.игсЭтоИГСАвто;
		Если игсЭтоИГСАвто Тогда
			Макет = ЭтотОбъект.ПолучитьМакет("ТОРГ_12_2");
			МакетигсЭтоИГСАвто = Истина;
		КонецЕсли; 
		// }} ПрофРешение Брикотнин М.А. - 29.10.2025 - #Задача № 0147

		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаДокумента = СведенияОДокументе.ТаблицаДокумента;
		
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Получаем сведения об используемых в документе контрагентах с разными ролями в документообороте.
		Для каждого КонтрагентДляПечати Из КонтрагентыДляПечати Цикл
			
			ОтборСведений.КонтрагентИзДокумента = СведенияОДокументе[КонтрагентДляПечати.Ключ];
			ОтборСведений.ДатаДляПолученияСведений = СведенияОДокументе.ДатаДляПолученияСведений;
			БанковскийСчетПродавца = Неопределено;
			Если КонтрагентДляПечати.Ключ = "Поставщик" Тогда
				БанковскийСчетПродавца = СведенияОДокументе.БанковскийСчетПродавца;
				ОтборСведений.Вставить("БанковскийСчетПродавца", БанковскийСчетПродавца);
			Иначе
				ОтборСведений.Удалить("БанковскийСчетПродавца");
			КонецЕсли;
						
			НайденныеСведения = СведенияОКонтрагентах.НайтиСтроки(ОтборСведений);
			Если НайденныеСведения.Количество() = 0 Тогда
				
				ГосударственныйКонтрактСсылка = СведенияОДокументе.ГосударственныйКонтрактСсылка;
				
				СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					ОтборСведений.КонтрагентИзДокумента,
					ОтборСведений.ДатаДляПолученияСведений,
					БанковскийСчетПродавца,
					,
					ГосударственныйКонтрактСсылка,
					Истина);
				
				НайденныеСведения = СведенияОКонтрагентах.Добавить();
				НайденныеСведения.КонтрагентИзДокумента     = ОтборСведений.КонтрагентИзДокумента;
				НайденныеСведения.ДатаДляПолученияСведений  = ОтборСведений.ДатаДляПолученияСведений;
				НайденныеСведения.БанковскийСчетПродавца    = БанковскийСчетПродавца;
				НайденныеСведения.СведенияОКонтрагенте      = СведенияОКонтрагенте;
				
			Иначе
				
				СведенияОКонтрагенте = НайденныеСведения[0].СведенияОКонтрагенте;
				
			КонецЕсли;
			КонтрагентыДляПечати.Вставить(КонтрагентДляПечати.Ключ, СведенияОКонтрагенте);
			
		КонецЦикла;
		
		// Выводим общие реквизиты шапки.
		ОбластьМакетаШапка.Параметры.Заполнить(СведенияОДокументе);
		
		ДополнительныеПараметрыШапки = Новый Структура;
		
		Если СведенияОДокументе.Поставщик = СведенияОДокументе.Грузоотправитель Тогда
			ДополнительныеПараметрыШапки.Вставить("ПредставлениеОрганизации", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(КонтрагентыДляПечати.Поставщик));
		Иначе
			ДополнительныеПараметрыШапки.Вставить("ПредставлениеОрганизации", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				КонтрагентыДляПечати.Грузоотправитель, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОДокументе.Подразделение) Тогда
			СведенияОПодразделении = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СведенияОДокументе.Подразделение, "ОбособленноеПодразделение, НаименованиеПолное");
			ДополнительныеПараметрыШапки.Вставить("ПредставлениеПодразделения", ?(СведенияОПодразделении.ОбособленноеПодразделение, СведенияОПодразделении.НаименованиеПолное, ""));
		КонецЕсли;
		
		Если СокрЛП(СведенияОДокументе.АдресДоставки) <> "" Тогда
			ПредставлениеГрузополучателяДоАдреса    = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				КонтрагентыДляПечати.Грузополучатель, "НаименованиеДляПечатныхФорм,ИНН,");
			ПредставлениеГрузополучателяПослеАдреса = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				КонтрагентыДляПечати.Грузополучатель, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
			ДополнительныеПараметрыШапки.Вставить("ПредставлениеГрузополучателя", ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
				"", ПредставлениеГрузополучателяДоАдреса+", ") + СведенияОДокументе.АдресДоставки
				+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса));
		Иначе
			ДополнительныеПараметрыШапки.Вставить("ПредставлениеГрузополучателя", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				КонтрагентыДляПечати.Грузополучатель, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
		КонецЕсли;
		
		ДополнительныеПараметрыШапки.Вставить("ПредставлениеПоставщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(КонтрагентыДляПечати.Поставщик));
		ДополнительныеПараметрыШапки.Вставить("ПредставлениеПлательщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(КонтрагентыДляПечати.Покупатель));
		
		// Выводим всевозможные коды
		ДополнительныеПараметрыШапки.Вставить("ОрганизацияПоОКПО",          КонтрагентыДляПечати.Грузоотправитель.КодПоОКПО);
		ДополнительныеПараметрыШапки.Вставить("ВидДеятельностиПоОКДП",      "");
		ДополнительныеПараметрыШапки.Вставить("ГрузополучательПоОКПО",      КонтрагентыДляПечати.Грузополучатель.КодПоОКПО);
		ДополнительныеПараметрыШапки.Вставить("ПоставщикПоОКПО",            КонтрагентыДляПечати.Поставщик.КодПоОКПО);
		ДополнительныеПараметрыШапки.Вставить("ПлательщикПоОКПО",           КонтрагентыДляПечати.Покупатель.КодПоОКПО);
		ДополнительныеПараметрыШапки.Вставить("ТранспортнаяНакладнаяНомер", "");
		ДополнительныеПараметрыШапки.Вставить("ТранспортнаяНакладнаяДата",  "");
		
		ОбластьМакетаШапка.Параметры.Заполнить(ДополнительныеПараметрыШапки);
		
		Если ЕстьОбластьГосконтракты Тогда
			Если ЗначениеЗаполнено(СведенияОДокументе.ГосударственныйКонтракт) Тогда
				ОбластьМакетаДатаНомер  = Макет.ПолучитьОбласть("ДатаНомерГосконтракт");
				
				ОбластьНомерИсправления = ОбластьМакетаДатаНомер.Области.Найти("НомерИсправленияГосконтракт");
				ОбластьДатаИсправления  = ОбластьМакетаДатаНомер.Области.Найти("ДатаИсправленияГосконтракт");
			Иначе
				ОбластьМакетаДатаНомер  = Макет.ПолучитьОбласть("ДатаНомер");
				
				ОбластьНомерИсправления = ОбластьМакетаДатаНомер.Области.Найти("НомерИсправления");
				ОбластьДатаИсправления  = ОбластьМакетаДатаНомер.Области.Найти("ДатаИсправления");
			КонецЕсли;
			
		Иначе
			ОбластьМакетаДатаНомер = ОбластьМакетаШапка;
			
			ОбластьНомерИсправления = ОбластьМакетаШапка.Области.Найти("НомерИсправления");
			ОбластьДатаИсправления  = ОбластьМакетаШапка.Области.Найти("ДатаИсправления");
		КонецЕсли;
		
		ПараметрыИсправление = Новый Структура;
		
		Если ЗначениеЗаполнено(СведенияОДокументе.НомерИсправления) И ЗначениеЗаполнено(СведенияОДокументе.ДатаИсправления) Тогда
			
			ПараметрыИсправление.Вставить("ТекстИсправления", НСтр("ru='Исправление   '"));
			ПараметрыИсправление.Вставить("НомерИсправления", СведенияОДокументе.НомерИсправления);
			ПараметрыИсправление.Вставить("ДатаИсправления",  Формат(СведенияОДокументе.ДатаИсправления, "ДФ=dd.MM.yyyy"));
			
			ЛинияГраницыРеквизитовИсправления = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьНомерИсправления.ГраницаСнизу 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьНомерИсправления.ГраницаСлева 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьНомерИсправления.ГраницаСправа 	= ЛинияГраницыРеквизитовИсправления;
			
			ОбластьДатаИсправления.ГраницаСнизу 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьДатаИсправления.ГраницаСлева 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьДатаИсправления.ГраницаСправа 	= ЛинияГраницыРеквизитовИсправления;
			
		КонецЕсли;
		
		ОбластьМакетаДатаНомер.Параметры.Заполнить(СведенияОДокументе);
		ОбластьМакетаДатаНомер.Параметры.Заполнить(ПараметрыИсправление);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		Если ЕстьОбластьГосконтракты Тогда
			ТабличныйДокумент.Вывести(ОбластьМакетаДатаНомер);
		КонецЕсли;
		
		// Инициализация счетчика страниц
		НомерСтраницы = 1;
		
		// Инициализация итогов по странице
		ИтогоМестНаСтранице        = 0;
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаБезНДСНаСтранице = 0;
		ИтогоНДСНаСтранице         = 0;
		ИтогоСуммаСНДСНаСтранице   = 0;
		
		// Инициализация итогов по документу
		ИтогоМест        = 0;
		ИтогоКоличество  = 0;
		ИтогоСуммаСНДС   = 0;
		ИтогоСуммаБезНДС = 0;
		ИтогоНДС         = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ТаблицаДокумента.Количество();
		
		// Выводим заголовок многострочной части
		ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы)); 
		
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		НДСИсчисляетсяНалоговымАгентом = СведенияОДокументе.НДСИсчисляетсяНалоговымАгентом = Истина
			И УчетНДС.ВедетсяУчетНДСПоФЗ335(СведенияОДокументе.ДатаДокумента);
			
		// Предзаполняем подвал документа заранее известными данными.
		ПараметрыПодвал = Новый Структура;
		ПараметрыПодвал.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ТаблицаДокумента.Количество(), ,",,,,,,,,0"));
		
		ЗаРуководителяНаОсновании = ?(СведенияОДокументе.ЗаРуководителяНаОснованииНаименование = "", "" , ", "+СведенияОДокументе.ЗаРуководителяНаОснованииНаименование);
		ПараметрыПодвал.Вставить("ФИОРуководителя",       СведенияОДокументе.РуководительФИО + ЗаРуководителяНаОсновании);
		ПараметрыПодвал.Вставить("ДолжностьРуководителя", СведенияОДокументе.РуководительДолжностьНаименование);
		
		ЗаГлавногоБухгалтераНаОсновании = ?(СведенияОДокументе.ЗаГлавногоБухгалтераНаОснованииНаименование = "", "" , ", "+СведенияОДокументе.ЗаГлавногоБухгалтераНаОснованииНаименование);
		ПараметрыПодвал.Вставить("ФИОГлавБухгалтера",     СведенияОДокументе.ГлавныйБухгалтерФИО + ЗаГлавногоБухгалтераНаОсновании);
		ПараметрыПодвал.Вставить("ФИОКладовщика",         СведенияОДокументе.КладовщикФИО);
		ПараметрыПодвал.Вставить("ДолжностьКладовщика",   СведенияОДокументе.КладовщикДолжность);
		
		Если ЗначениеЗаполнено(СведенияОДокументе.ДатаПодписанияДокумента) Тогда
			ПолнаяДатаДокумента = Формат(СведенияОДокументе.ДатаПодписанияДокумента, "ДФ=""дд ММММ гггг """"года""""""");
			ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
			ПервыйРазделитель   = СтрНайти(ПолнаяДатаДокумента," ");
			ВторойРазделитель   = СтрНайти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
			
			ПараметрыПодвал.Вставить("ДатаДокументаДень",  """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """");
			ПараметрыПодвал.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
			ПараметрыПодвал.Вставить("ДатаДокументаГод",   Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
		Иначе
			ПараметрыПодвал.Вставить("ДатаДокументаДень",  """     """);
			ПараметрыПодвал.Вставить("ДатаДокументаМесяц", "");
			ПараметрыПодвал.Вставить("ДатаДокументаГод",   " 20     года");
		КонецЕсли;
		
		ДлинаСтрокиДоверенность = СтрДлина(СведенияОДокументе.ДоверенностьВыдана);
		Если ДлинаСтрокиДоверенность < 70 Тогда
		
			ДоверенностьВыдана = СведенияОДокументе.ДоверенностьВыдана;
			ДоверенностьВыдана1 = "";
		
		Иначе
			// Разбиваем строку на две подстроки, таким образом чтобы первая строка была не более 70ти символов
			// Для этого ищем очередной пробел и проверяем длину строк в предположении, что перенос будет выполнен по найденной позиции.
			ДоверенностьВыдана1 = СведенияОДокументе.ДоверенностьВыдана;
			ПозицияПоиска = СтрНайти(ДоверенностьВыдана1," ")+1;
			
			// Если найден очередной пробел и длина первой строки после операции будет менее 70ти символов, то выполняем еще одну итерацию.
			Пока ПозицияПоиска > 1 И ДлинаСтрокиДоверенность - СтрДлина(ДоверенностьВыдана1) + ПозицияПоиска < 70 Цикл
				
				ДоверенностьВыдана1 = Сред(ДоверенностьВыдана1, ПозицияПоиска);
				ПозицияПоиска       = СтрНайти(ДоверенностьВыдана1," ")+1;
				
			КонецЦикла; 
			
			ДоверенностьВыдана = Лев(СведенияОДокументе.ДоверенностьВыдана,ДлинаСтрокиДоверенность - СтрДлина(ДоверенностьВыдана1));
			
		КонецЕсли; 
		
		ДанныеДоверенность = Новый Структура;
		ДанныеДоверенность.Вставить("ДоверенностьНомер",     СведенияОДокументе.ДоверенностьНомер);
		ДанныеДоверенность.Вставить("ДоверенностьВыдана",    ДоверенностьВыдана);
		ДанныеДоверенность.Вставить("ДоверенностьВыдана1",   ДоверенностьВыдана1);
		ДанныеДоверенность.Вставить("ДоверенностьЧерезКого", СведенияОДокументе.ДоверенностьЧерезКого);
		ДанныеДоверенность.Вставить("ДоверенностьДата",
			?(ЗначениеЗаполнено(СведенияОДокументе.ДоверенностьДата), Формат(СведенияОДокументе.ДоверенностьДата, "ДЛФ=ДД"), ""));
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДоверенность);
		ОбластьМакетаПодвал.Параметры.Заполнить(ПараметрыПодвал);
			
		// Выводим многострочную часть документа
		Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ПараметрыСтроки = Новый Структура;
			
			ПараметрыСтроки.Вставить("Номер", НомерСтроки);
			ПараметрыСтроки.Вставить("ТоварНаименование", СтрокаДокумента.ТоварНаименование);
			ПараметрыСтроки.Вставить("ТоварКод", СтрокаДокумента.ТоварКод);
			ПараметрыСтроки.Вставить("БазоваяЕдиницаНаименование", СтрокаДокумента.ЕдиницаИзмеренияНаименование);
			ПараметрыСтроки.Вставить("БазоваяЕдиницаКодПоОКЕИ", СтрокаДокумента.ЕдиницаИзмеренияКод);
			
			ПараметрыСтроки.Вставить("КоличествоМест", СтрокаДокумента.КоличествоМест);
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.КоличествоМест) Тогда
				ПараметрыСтроки.Вставить("ВидУпаковки", "");
				ПараметрыСтроки.Вставить("КоличествоВОдномМесте", "");
			Иначе
				ПараметрыСтроки.Вставить("ВидУпаковки", СтрокаДокумента.ВидУпаковкиНаименование);
				ПараметрыСтроки.Вставить("КоличествоВОдномМесте", СтрокаДокумента.КоличествоВОдномМесте);
			КонецЕсли;
			ПараметрыСтроки.Вставить("Количество",  СтрокаДокумента.Количество);
			ПараметрыСтроки.Вставить("Цена",        СтрокаДокумента.Цена);
			ПараметрыСтроки.Вставить("СуммаБезНДС", СтрокаДокумента.СуммаБезНДС);
			
			Если НДСИсчисляетсяНалоговымАгентом Тогда
				ПараметрыСтроки.Вставить("СтавкаНДС", УчетНДС.НадписьСтавкаНДСИсчисляетсяНалоговымАгентом());
				ПараметрыСтроки.Вставить("СуммаНДС",  УчетНДС.НадписьСуммаНДСИсчисляетсяНалоговымАгентом());
				ПараметрыСтроки.Вставить("СуммаСНДС", УчетНДС.НадписьСуммаНДСИсчисляетсяНалоговымАгентом());
			Иначе
				ПараметрыСтроки.Вставить("СтавкаНДС", СтрокаДокумента.СтавкаНДС);
				ПараметрыСтроки.Вставить("СуммаНДС",  СтрокаДокумента.СуммаНДС);
				ПараметрыСтроки.Вставить("СуммаСНДС", СтрокаДокумента.СуммаСНДС);
			КонецЕсли;
			Если СтрокаДокумента.ЦенаПерерасчет <> 0 Тогда
				ПараметрыСтроки.Вставить("ЦенаПерерасчет", СтрокаДокумента.ЦенаПерерасчет);
				ПараметрыСтроки.Вставить("КоличествоПерерасчет", СтрокаДокумента.КоличествоПерерасчет);
				ПараметрыСтроки.Вставить("БазоваяЕдиницаКодПоОКЕИПерерасчет", "168");
				ПараметрыСтроки.Вставить("БазоваяЕдиницаНаименованиеПерерасчет", "т");
			Иначе 
				ПараметрыСтроки.Вставить("БазоваяЕдиницаКодПоОКЕИПерерасчет", "");
				ПараметрыСтроки.Вставить("БазоваяЕдиницаНаименованиеПерерасчет", "");
				ПараметрыСтроки.Вставить("ЦенаПерерасчет", 0);
				ПараметрыСтроки.Вставить("КоличествоПерерасчет", СтрокаДокумента.КоличествоПерерасчет);
			КонецЕсли;  
			
			// {{ ПрофРешение Брикотнин М.А. - 29.10.2025 - #Задача № 0147
			Если МакетигсЭтоИГСАвто Тогда
				ПараметрыСтроки.Вставить("игсКоэффициентПересчета", СтрокаДокумента.игсКоэффициентПересчета);
			КонецЕсли;			
	       	// }} ПрофРешение Брикотнин М.А. - 29.10.2025 - #Задача № 0147 
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ПараметрыСтроки);
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего); // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			// если строка с подвалом не умещается на странице, то выводим итог по странице и начинаем новую страницу
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				// Если строка одна и она не влезла на первую страницу - итоги не выводим
				Если КоличествоСтрок > 1 Тогда
					ПараметрыИтоги = Новый Структура;
					
					ПараметрыИтоги.Вставить("ИтогМестПоСтранице",       ИтогоМестНаСтранице);
					ПараметрыИтоги.Вставить("ИтогКоличествоПоСтранице", ИтогоКоличествоНаСтранице);
					ПараметрыИтоги.Вставить("ИтогСуммыПоСтранице",      ИтогоСуммаБезНДСНаСтранице);
					
					Если НДСИсчисляетсяНалоговымАгентом Тогда
						ПараметрыИтоги.Вставить("ИтогНДСПоСтранице",        УчетНДС.НадписьСуммаНДСИсчисляетсяНалоговымАгентом());
						ПараметрыИтоги.Вставить("ИтогСуммыСНДСПоСтранице",  УчетНДС.НадписьСуммаНДСИсчисляетсяНалоговымАгентом());
					Иначе
						ПараметрыИтоги.Вставить("ИтогНДСПоСтранице",        ИтогоНДСНаСтранице);
						ПараметрыИтоги.Вставить("ИтогСуммыСНДСПоСтранице",  ИтогоСуммаСНДСНаСтранице);
					КонецЕсли;
					
					ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(ПараметрыИтоги);
					ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				КонецЕсли;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Очистим итоги по странице
				ИтогоМестНаСтранице        = 0;
				ИтогоКоличествоНаСтранице  = 0;
				ИтогоСуммаБезНДСНаСтранице = 0;
				ИтогоНДСНаСтранице         = 0;
				ИтогоСуммаСНДСНаСтранице   = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				
				ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы));
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице
			ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + СтрокаДокумента.КоличествоМест;
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + СтрокаДокумента.Количество;
			ИтогоСуммаБезНДСНаСтранице = ИтогоСуммаБезНДСНаСтранице + СтрокаДокумента.СуммаБезНДС;
			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СтрокаДокумента.СуммаНДС;
			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СтрокаДокумента.СуммаСНДС;
			
			// Увеличим итоги по документу
			ИтогоМест        = ИтогоМест        + СтрокаДокумента.КоличествоМест;
			ИтогоКоличество  = ИтогоКоличество  + СтрокаДокумента.Количество;
			ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СтрокаДокумента.СуммаБезНДС;
			ИтогоНДС         = ИтогоНДС         + СтрокаДокумента.СуммаНДС;
			ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СтрокаДокумента.СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ПараметрыИтоги = Новый Структура;
		ПараметрыИтоги.Вставить("ИтогМестПоСтранице",        ИтогоМестНаСтранице);
		ПараметрыИтоги.Вставить("ИтогКоличествоПоСтранице",  ИтогоКоличествоНаСтранице);
		ПараметрыИтоги.Вставить("ИтогСуммыПоСтранице",       ИтогоСуммаБезНДСНаСтранице);
		
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			ПараметрыИтоги.Вставить("ИтогНДСПоСтранице",       УчетНДС.НадписьСуммаНДСИсчисляетсяНалоговымАгентом());
			ПараметрыИтоги.Вставить("ИтогСуммыСНДСПоСтранице", УчетНДС.НадписьСуммаНДСИсчисляетсяНалоговымАгентом());
		Иначе
			ПараметрыИтоги.Вставить("ИтогНДСПоСтранице",       ИтогоНДСНаСтранице);
			ПараметрыИтоги.Вставить("ИтогСуммыСНДСПоСтранице", ИтогоСуммаСНДСНаСтранице);
		КонецЕсли;
		
		ОбластьМакетаИтогоПоСтранице.Параметры.Заполнить(ПараметрыИтоги);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ПараметрыИтоги = Новый Структура;
		
		ПараметрыИтоги.Вставить("ИтогМест",       ИтогоМест);
		ПараметрыИтоги.Вставить("ИтогКоличество", ИтогоКоличество);
		ПараметрыИтоги.Вставить("ИтогСуммы",      ИтогоСуммаБезНДС);
		
		Если НДСИсчисляетсяНалоговымАгентом Тогда
			ПараметрыИтоги.Вставить("ИтогНДС",       УчетНДС.НадписьСуммаНДСИсчисляетсяНалоговымАгентом());
			ПараметрыИтоги.Вставить("ИтогСуммыСНДС", УчетНДС.НадписьСуммаНДСИсчисляетсяНалоговымАгентом());
		Иначе
			ПараметрыИтоги.Вставить("ИтогНДС",       ИтогоНДС);
			ПараметрыИтоги.Вставить("ИтогСуммыСНДС", ИтогоСуммаСНДС);
		КонецЕсли;
		
		ОбластьМакетаВсего.Параметры.Заполнить(ПараметрыИтоги);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаВсего);
		
		// Дозаполняем и выводим подвал документа
		ПараметрыПодвал = Новый Структура;
		ПараметрыПодвал.Вставить("ВсегоМестПрописью", ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0"))); 
		ПараметрыПодвал.Вставить("СуммаПрописью",     ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаСНДС, СведенияОДокументе.Валюта));
		ОбластьМакетаПодвал.Параметры.Заполнить(ПараметрыПодвал);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);
		
		Если УправлениеПечатьюБП.ЭтоПечатнаяФормаЗаПоставщика(СведенияОДокументе.Документ) Тогда
			УправлениеПечатьюБП.ОчиститьФаксимильнуюПодписьИПечатьИзМакета(ТабличныйДокумент, ОбъектыПечати, СведенияОДокументе.Документ);
		Иначе
			УправлениеПечатьюБП.ДоработатьФаксимильнуюПодписьИПечать(ТабличныйДокумент, ОбъектыПечати,
				СведенияОДокументе.Организация, СведенияОДокументе.Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура УстановитьМинимальныеПоляПечати(ТабличныйДокумент) 

	// Проверка на веб-клиент
	СисИнфо = Новый СистемнаяИнформация;
	ЗначениеБоковогоПоля = ?(ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра), 5, 10); 
	
	Если ТабличныйДокумент.ПолеСлева < ЗначениеБоковогоПоля Тогда
		ТабличныйДокумент.ПолеСлева = ЗначениеБоковогоПоля;
	КонецЕсли; 
	
	Если ТабличныйДокумент.ПолеСправа < ЗначениеБоковогоПоля Тогда
		ТабличныйДокумент.ПолеСправа = ЗначениеБоковогоПоля;
	КонецЕсли;
	
	Если ТабличныйДокумент.ПолеСверху < 5 Тогда
		ТабличныйДокумент.ПолеСверху = 5;
	КонецЕсли; 

	Если ТабличныйДокумент.ПолеСнизу < 5 Тогда
		ТабличныйДокумент.ПолеСнизу = 5;
	КонецЕсли;

КонецПроцедуры
